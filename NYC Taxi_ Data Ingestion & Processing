--###########  The New York Taxi and Limousine Commission [TLC] Analysis  ################
-- ############     Data Ingestion and Processing - Assignment     ##############
-- The analysis has been done in 3 parts
-- Part 1. Basic Data Quality Checks and EDA
-- Part 2. Analysis-I
-- Part 3. Analysis-II


--Set the following parameters on Hue interface
--/* IMPORTANT: BEFORE CREATING ANY TABLE, MAKE SURE YOU RUN THIS COMMAND */
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;
--IMPORTANT: Before partitioning any table, make sure you run the below commands.
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

--######################## Part 1.  Basic Data Quality Checks and EDA #########################################################

--I will create an initial data table titled nyc_taxi_data to get a general understanding of the dataset.
--Then extract basic statistics, check for data validity, invalid values, outliers etc

-- 1.1 Create data table titled nyc_taxi_data for loading data

drop table nyc_taxi_data;

CREATE EXTERNAL TABLE IF NOT EXISTS nyc_taxi_data(vendorid int, tpep_pickup_timestamp string, tpep_dropoff_timestamp string,
passenger_count int, trip_distance double,ratecode_id int, store_and_fwd_flag string, pickup_location int, dropoff_location int,
payment_type int, fare_amount double, extra double, mta_tax double, tip_amount double, tolls_amount double,
improvement_surcharge double, total_amount double)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
LOCATION '/common_folder/nyc_taxi_data/'
tblproperties ("skip.header.line.count"="2");

-- 1.2 Checking top 10 rows from the uploaded data

select * from nyc_taxi_data limit 10;

-- uploaded data seems okay and as per scheme

--Part 1: Question 1
--1.3 How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider.

select vendorid as Vendor_Id, count(*) as number_of_records
from nyc_taxi_data
group by vendorid
order by vendorid;

--Result 
--Vendor ID 1 = Creative Moblie Technologies,LLC provided 84,47,149 records
--Vendor ID 2 = VeriFone Inc. provided 103,45,930 records

--Part 1: Question 2
--1.4 The data provided is for months November and December only. Check whether the data is consistent, and if not, identify the data quality issues. 
--Mention all data quality issues in comments.
--We will do EDA on tpep_pickup_timestamp and tpep_dropoff_timestamps and look for any inconsistency in the available data. Only trips that registered a --tpep_pickup_timestamp & tpep_dropoff_timestamp during November and December 2017 will be considered.

-- Cheking for tpep_pickup_timestamp
select  year(tpep_pickup_timestamp)as pickup_Year, month(tpep_pickup_timestamp)as pickup_Month, count(*)as number_of_records
from nyc_taxi_data
group by year(tpep_pickup_timestamp), month(tpep_pickup_timestamp)
order by pickup_Year, pickup_Month;

--Results shows invalid records based on pickup_timestamp.

--Checking on tpep_dropoff_timestamp.
select year(tpep_dropoff_timestamp) as dropoff_year, month(tpep_dropoff_timestamp) as dropoff_month, count(*) as number_of_records
from nyc_taxi_data
group by year(tpep_dropoff_timestamp), month(tpep_dropoff_timestamp)
order by dropoff_year, dropoff_month;

--Results shows several invalid records. The dropoff_timestamps also range from the year 2001 to 2041.
--There are 1907 invalid records based on dropoff_timestamp.

--1.5 Checking any records in which the pickup_timestamp is after the dropoff_timestamp.

SELECT count(*) as nonconf_timestamps
FROM nyc_taxi_data
where unix_timestamp(tpep_pickup_timestamp) > unix_timestamp(tpep_dropoff_timestamp);

--There are 1419 records where pickup_timestamp is after the dropoff_timestamp. The dataset seems inconsistent and have erroneous timestamps.


-- Table data dictionary suggests that data can be categorized under two heads: 1.Trip Details and 2.Fare Details.

--1.6 EDA - Aggregating on trip detail coloumns

select count(distinct vendorid) as number_of_tpep_vendors, count(*) as number_of_records, min(to_date(tpep_pickup_timestamp)) as oldest_pickup_timestamp, 
 max(to_date(tpep_pickup_timestamp)) as recent_pickup_timestamp, min(to_date(tpep_dropoff_timestamp)) as oldest_dropoff_timestamp, 
  max(to_date(tpep_dropoff_timestamp)) as recent_dropoff_timestamp,  min(passenger_count) as min_passengers_pertrip, 
   max(passenger_count) as max_passengers_pertrip, avg(passenger_count) as average_passengers_pertrip, min(trip_distance) as min_trip_distance,
    max(trip_distance) as max_trip_distance, avg(trip_distance) as average_trip_distance, count(distinct ratecode_id) as number_of_ratecode_ids,
   count(distinct store_and_fwd_flag) as types_of_store_forward_flag, count(distinct pickup_location) as num_of_pickup_locations,
  count(distinct dropoff_location) as num_of_dropoff_locations, count(distinct payment_type) as number_of_payment_types
from nyc_taxi_data;

--a. There are 2 TPEP vendors
--b. There are total of 187,93,079 records in the dataset 
--c. The tpep_pickup_timestamps and tpep_drop_timestamps range between 1st January 2001 to 15th November 2041. This is out of range.
--d. The passenger count ranges between 0 to 192. Clearly this is invalid as trip cannot start without passenger and 192 passengers is unusual in a taxi.
--e. The trip distances range between 0 to 702.5 miles. A trip of 0 miles should not be charged and 702.5 miles seems like a outlier.Aerage distance per trip is at 2.87 miles.
--f. There are 7 distinct ratecode_ids in the dataset against 6 given in the data_dictionary.
--g. There are 264 logged pickup_locations and 262 logged dropoff_locations.
--h. There are 4 distinct payment_type in the dataset

--1.7 EDA - Aggregating on fare detail coloumns

select min(fare_amount) as min_fare_amount, max(fare_amount) as max_fare_amount, avg(fare_amount) as average_fare_amount,
  min(extra) as min_extra_amount, max(extra) as max_extra_amount, avg(extra) as average_extra_amount,
   count(distinct mta_tax) as types_of_mta_tax, min(mta_tax) as min_mta_tax, max(mta_tax) as max_mta_tax, avg(mta_tax) as average_mta_tax,
    min(tip_amount) as min_tip_amount, max(tip_amount) as max_tip_amount, avg(tip_amount) as average_tip_amount,
     min(tolls_amount) as min_toll_amount, max(tolls_amount) as max_toll_amount, avg(tolls_amount) as average_toll_amount,
    count(distinct improvement_surcharge) as types_of_surcharge, min(improvement_surcharge) as min_surcharge, max(improvement_surcharge) as max_surcharge, avg(improvement_surcharge) as average_surcharge,
   min(total_amount) as min_total_amount, max(total_amount) as max_total_amount, avg(total_amount) as average_total_amount
from nyc_taxi_data;

--a. The fare_amount attribute Range: -$499 and $3,93,221.5 | Average: $13.04. The trips with fare_amount <= 0 will be treated as invalid. The max amount is $3,93,221.5 seems like an outlier.
--b. The extra attribute Range: -$48.64 and $69.8 | Average: $0.32. The extra amount is a surcharge that can only take up $0.5 and $1 during rush hour and traffic, otherwise it is $0. Therefore, all other values will be treated as non-conformities.
--c. The mta_tax attribute Range: -$0.5 and $117.85 | Average: $0.497. There are 19 distinct values of mta_tax.
--d. The tip_amount attribute Range: -$218 and $496 | Average: $1.85. Tip tip_amounts are automatically populated for credit card paid trips but cash tips are not recorded. However, a negative tip amount or records with tip amount < 0 will be treated as invalid.
--e. The tolls_amount arribute Range: -$19 and $1018.95 | Average: $0.327. Negative toll amount or records with tolls_amount < 0 will be treated as a non-conformity and invalid.
--f. The improvement_surcharge attribute Range: -$0.3 and $1 | Average: $0.299. The improvement_surcharge can only take up $0 or $0.3. Hence, all improvement_surcharge other than $0 and $0.3 as invalid.
--g. The total_amount attribute Range: -$499.3 and $3,93,222.32 | Average: $16.34. 

--1.8 Passenger_count

select passenger_count as num_of_passengers, count(*) as number_of_records
from nyc_taxi_data
group by passenger_count
order by passenger_count;

--The passenger_count values range between 0 to 192 which is abnormal. 0 passenger count is also not possible and erroneous 
--Only passenger_count between 1-6 will be treated as valid records.

--1.9 Rate_code

select ratecode_id as rate_code, count(*) as number_of_records
from nyc_taxi_data
group by ratecode_id
order by ratecode_id;

--From the above result there are 7 distinct rate codes while the data dictionary limits it to 6 distinct codes between 1-6.
--The 178 records under rate_code 99 are invalid

--1.10 Payment_type

select payment_type as payment_type, count(*) as number_of_records
from nyc_taxi_data
group by payment_type
order by payment_type;

--There are 4 distinct payment_types. It is consistent with data dictionary.

--1.11 extra ($0.50 and $1 rush hour and overnight charges)

select extra as extra_charge, count(*) as number_of_records
from nyc_taxi_data
group by extra
order by extra;

--There are 44 distinct extra_charge values in the dataset Ranging between -$48.64 and $69.8.
--Extra can only take up $0.5 and $1 during rush hour and traffic, otherwise it is $0. Therefore, all other values will be treated as invalid.

--1.12 MTA_tax.$0.50 MTA tax.

select mta_tax as mta_tax, count(*) as number_of_records
from nyc_taxi_data
group by mta_tax
order by mta_tax;

--There are 19 distinct mta_tax values in the dataset Ranging between -$0.5 and $117.85.
--Valid mta_tax values are $0 or $0.5. Hence, all other values will be treated as invalid and to be removed.

--1.13 Checking improvement_surcharge if other than $0.30 has been recorded.

select improvement_surcharge as improvement_surcharge, count(*) as number_of_records
from nyc_taxi_data
group by improvement_surcharge
order by improvement_surcharge;

--There are 5 distinct values of improvement_surcharge Ranging between -$0.3 and $1 instead of two.
--All other values of improvement_surcharge will be treated as non-conformity

--1.14 Checking if non-zero tip amount has been registered for cash payment trips.

select tip_amount as tip_value, count(*) as number_of_records
from nyc_taxi_data
where payment_type=2 and tip_amount!= 0
group by tip_amount;

--There are 3 records of cash payment_type registered as tip_amount in the range $1.8 to $20.65.
--These records are invalid as per data dictionary but we will ignore as only 3 records are insignificant

--1.15 Checking store_forward_flag parameter

select store_and_fwd_flag as store_and_forward_flag, count(*) as number_of_records
from nyc_taxi_data
group by store_and_fwd_flag;

--There are only 2 store_forward_flag parameter values [Y and N] which is inline with the specified limits
--With 0.34% of the total records being stored and the passed to the servers.

--Part 1: Question 3 
--1.16 You might have encountered unusual or erroneous rows in the dataset. 
--Can you conclude which vendor is doing a bad job in providing the records?

select vendorid as Vendor_Id, count(*) as nonconf_records
from nyc_taxi_data
where (year(tpep_pickup_timestamp) !=2017 or 
  month(tpep_pickup_timestamp) not in (11,12) or 
   year(tpep_dropoff_timestamp) !=2017 or
    month(tpep_dropoff_timestamp) not in (11,12) or 
     unix_timestamp(tpep_pickup_timestamp) > unix_timestamp(tpep_dropoff_timestamp) or 
      passenger_count not in (1,2,3,4,5,6) or 
       trip_distance <= 0.0 or 
        ratecode_id not in (1,2,3,4,5,6) or
         payment_type not in (1,2,3,4,5,6) or 
          fare_amount <= 0 or extra not in (0,0.5,1) or 
           mta_tax not in(0,0.5) or
           tip_amount < 0.0 or 
          (payment_type=2 and tip_amount!=0) or 
         tolls_amount < 0.0 or 
        improvement_surcharge not in (0,0.3) or 
       total_amount <= 0)
 group by vendorid
order by vendorid;

--For VendorID 1: Creative Moblie Technologies,LLC
--Number of Non-Conforming Records Provided: 2,08,405 records
--Total Records Provided : 84,47,149 records
--Percentage - 2.467%  non conformity

--For VendorID 2: VeriFone Inc.
--Number of Non-Conforming Records Provided: 103192
--Total Records Provided : 103,45,930 records
--Percentage - 0.997%  non conformity

--Conclusion: VendorID 1: Creative Moblie Technologies,LLC is doing a bad job of providing records.

--A total of 3,11,597 records i.e 1.66% of the entire dataset were found to be non-conforming. 
--All non conforming records will be removed from partioned table for further analysis.

--1.17 Creating the nyc_taxi_data_orc_partition table [Note: The location of the table has been altered appropriately]

CREATE EXTERNAL TABLE IF NOT EXISTS nyc_taxi_data_orc_partition(vendorid int, tpep_pickup_timestamp string, tpep_dropoff_timestamp string,
passenger_count int, trip_distance double, ratecode_id int, store_and_fwd_flag string, pickup_location int, dropoff_location int,
payment_type int, fare_amount double, extra double, mta_tax double, tip_amount double, tolls_amount double,
improvement_surcharge double, total_amount double) PARTITIONED BY (mnth int, m_day int)
STORED AS orc LOCATION '/user/hive/warehouse/ravs036_taxi_orc_partition'
TBLPROPERTIES ("orc.compress" = "SNAPPY");

--1.18 Populating the nyc_taxi_data_orc_partition PARTITION(mnth, m_day) table

INSERT OVERWRITE TABLE nyc_taxi_data_orc_partition PARTITION(mnth, m_day)
select vendorid, tpep_pickup_timestamp, tpep_dropoff_timestamp, passenger_count, trip_distance, ratecode_id, store_and_fwd_flag,
pickup_location, dropoff_location, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
improvement_surcharge, total_amount, month(tpep_pickup_timestamp)as mnth, day(tpep_pickup_timestamp)as m_day
from nyc_taxi_data
where year(tpep_pickup_timestamp)=2017 and 
 month(tpep_pickup_timestamp) in (11,12) and 
  year(tpep_dropoff_timestamp)=2017 and 
   month(tpep_dropoff_timestamp) in (11,12) and 
    unix_timestamp(tpep_pickup_timestamp) < unix_timestamp(tpep_dropoff_timestamp) and 
     passenger_count in(1,2,3,4,5,6) and 
      trip_distance > 0.0 and 
       ratecode_id in(1,2,3,4,5,6) and 
        payment_type in (1,2,3,4,5,6) and 
        fare_amount > 0 and 
        extra in (0,0.5,1) and 
       mta_tax in(0,0.5) and 
      tip_amount>=0.0 and 
     tolls_amount >= 0.0 and 
    improvement_surcharge in (0,0.3) and 
   total_amount > 0;


--############################# Part 2: Analysis-I ################################################################

--A clean, ORC partitioned table created for analysis. Removed all the erroneous rows.

--Part 2: Question 1 

--2.1 Compare the overall average fare per trip for November and December.
--Lets have a look at the grouped table of month and average fare_amount.

select mnth as month_of_year, round(avg(fare_amount),2)as average_fare_amount
from nyc_taxi_data_orc_partition
group by mnth
order by mnth;

--November average fare_amount: $12.9
--December average fare_amount: $12.75
--Therefore the average fare_amount recorded during November is 1.17% higher than the average fare_amount recorded in December.


--########## Part 2: Question 2 ##########

--2.2 Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? 
--Do most people travel solo or with other people?

--Let's have a look at how many trips are made by each level of passenger_count 

select passenger_count as num_of_passengers, count(*)as number_of_records
from nyc_taxi_data_orc_partition
group by passenger_count
order by passenger_count;

--Let's compare if the passengers prefer to travel solo [i.e, passenger_count=1] or in groups [i.e, passenger_count [2-6]]

SELECT sum(CASE when passenger_count = 1 THEN 1 ELSE 0 END)as solo_passenger_trips, 
sum(CASE when passenger_count != 1 THEN 1 ELSE 0 END)as group_passenger_trips, 
round(100*sum(CASE when passenger_count = 1 THEN 1 ELSE 0 END)/count(*),3) as solo_trips_as_percentage_of_total_trips
from nyc_taxi_data_orc_partition;

--Number of trips with Solo Passengers: 131,02,523
--Number of trips with Group Passengers: 53,78,444
--Percentage of trips with Solo Passengers w.r.t Total Number of trips: 70.897%
--From the results it is clear that in 70.897% of all trips, people prefer to travel Solo.


--########## Part 2: Question 3 ##########

--2.3 Which is the most preferred mode of payment?
--Lets look at the grouped table of payment_type w.r.t number of records.

select payment_type as payment_mode, count(*) as number_of_records
from nyc_taxi_data_orc_partition
group by payment_type
order by number_of_records desc;

--From the table it is clear that Credit_Card [payment_type=1] and Cash [payment_type=2] constitute the majority of the records in the dataset. Let us compare the results.

SELECT sum(CASE when payment_type = 1 THEN 1 ELSE 0 END)as Credit_Card_Paid_Trips,sum(CASE when payment_type = 2 THEN 1 ELSE 0 END)as Cash_Paid_Trips, count(*)as Total_Number_Trips,
round(100*sum(CASE when payment_type = 1 THEN 1 ELSE 0 END)/count(*),2) as Percentage_Trips_paidwith_Credit_Card, round(100*sum(CASE when payment_type = 2 THEN 1 ELSE 0 END)/count(*),2) as Percentage_Trips_paidwith_Cash
from nyc_taxi_data_orc_partition;

--Total Number of records: 184,80,967

--Credit Card Payments [payment_type=1]
--Number of Credit Card Paid trips: 124,69,337
--Percentage of Total Trips paid with Credit Card [payment_type=1]: 67.47%

--Cash Payments [payment_type=2]
--Number of Cash Paid trips: 59,14,388
--Percentage of Total Trips paid with Cash [payment_type=2]: 32.00%

--Therefore, Credit Card [payment_type=1] is the most preferred type of payment.


--########## Part 2: Question 4 ##########

--2.4 What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. 

--In our dataset it is clearly stated that tip_amount is not recorded for cash payments and is default set to 0. We need to remove these fields before we compute the central tendency as these records are synonymous to missing records. Therefore we will remove all records where payment_type=2 [Cash Payments]

select round(avg(tip_amount),3) as Average_Tip, round(percentile_approx(tip_amount,0.25),3)as 25th_Percentile_Tip, round(percentile_approx(tip_amount, 0.50),3)as 50th_Percentile_Tip, round(percentile_approx(tip_amount, 0.75),3)as 75th_Percentile_Tip, count(distinct tip_amount)as Distict_Tip_Amounts
from nyc_taxi_data_orc_partition
where payment_type != 2;

--Here, since tip_amount is stored as double data type we have to use percentile_approx() instead of percentile(). 
--Since the number of distinct tip amounts 3,894 < 10,000 percentile_approx() returns the exact percentile value.

--There $0.683 difference of the Average_Tip - Median_Tip [50th percentile], this diffence constitutes to 39.50% of the inter-quartile range. Therefore, there is significant skewness in the distribution of the tip_amount parameter. This implies that the Average Tip is sqewed to the right of the Median_tip. This may be offset due to certain records having higher tip_amount values. Therefore, in this situation Average_Tip is not representative of central tendency. We can consider Median_Tip as a better representative of central tendency.



--########## Part 2: Question 5 #############

--2.5 Explore the ‘Extra’ (charge) variable - what is the fraction of total trips where an extra charge is levied?

--Let us observe the extra_charge attribute in a grouped table w.r.t number of records.

select extra as extra_charge, count(*)as number_of_records
from nyc_taxi_data_orc_partition	
group by extra
order by extra;

--The number of trips where the extra charge was levied is marginally lower than the number of trips for which it was not. 
--Let us write a query to compare the Fraction of trips for which the extra_charge was levied.

SELECT sum(CASE when extra != 0 THEN 1 ELSE 0 END)as Trips_With_Extra_Charge, count(*)as Total_Number_Trips,
round(sum(CASE when extra != 0 THEN 1 ELSE 0 END)/count(*),5) as Fraction_Trips_With_Extra_Charge
from nyc_taxi_data_orc_partition;

--Number of Trips for which the extra charge was levied: 85,24,850
--Total Number of Trips: 184,80,967
--Fraction of trips for which the Extra_Misc_Charge was levied: 0.46128 [or 46.128%]


--############################# Part 3: Analysis-II ################################################################

--Part 3: Question 1

--3.1 What is the correlation between the number of passengers and tip paid? 
--Do multiple travellers pay more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)

--We will exclude the records with payment_type=2 for this query. Because cash payment_type tips are marked as 0 in the dataset.

select round(corr(passenger_count, tip_amount),3)as corr_passengercnt_vs_tipAmt, 
 round(avg(CASE when passenger_count=1 then tip_amount else null end),3) as solo_trips_average_tip, 
  round(avg(CASE when passenger_count != 1 then tip_amount else null end),3) as group_trips_average_tip
  from nyc_taxi_data_orc_partition
where payment_type != 2;

--Correlation between Passenger Count and Tip_Amount: +0.009 


--Part 3: Question 2
--3.2 Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20.
--Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).

select tip_bucket, count(*)as num_of_records, max(records_count)as total_number_records, 
round(count(*)/max(records_count),5)as tip_bucket_asfractionof_overall
from (select kcol.*, count(*) over () records_count,
	CASE when tip_amount >= 0 and tip_amount <5 then '0_5_bucket' 
   	 when tip_amount >=5 and tip_amount < 10 then '5_10_bucket'
	  when tip_amount >=10 and tip_amount < 15 then '10_15_bucket'
	   when tip_amount >=15 and tip_amount < 20 then '15_20_bucket'
	  else '20_above_bucket' 
	 end as tip_bucket 
    from nyc_taxi_data_orc_partition kcol)as sub_tbl
 group by tip_bucket
order by tip_Bucket_asfractionof_Overall desc;

--The results of the table clearly specify the following about tip_bucket
--0_5_bucket constitutes 92.411% 
--5_10_bucket constitutes 5.623% 
--10_15_bucket constitutes 1.685%
--15_20_bucket constitutes 0.191%
--20_above_bucket constitutes 0.090%


--Part 3: Question 3

--3.3 Which month has a greater average ‘speed’ - November or December? Note that the variable ‘speed’ will have to be derived from other metrics.
--We will use Unix timestamp

SELECT round(avg(CASE when mnth=11 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3)as November_Average_Speed_MPH, round(avg(CASE when mnth=12 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3)as December_Average_Speed_MPH, round(round(avg(CASE when mnth=11 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3) - round(avg(CASE when mnth=12 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3),3) as November_minus_December_Avg_Speed_MPH
from nyc_taxi_data_orc_partition;

--November Month Average Speed: 12.695 MPH
--December Month Average Speed: 12.625 MPH
--The Average Speed of taxis in November is greater than their Average Speed in December by 0.07 MPH.


--Part 3: Question 4

--3.4 Analyse the average speed of the most happening days of the year i.e. 31st December (New year’s eve) and 25th December (Christmas Eve) and compare it with the overall average. 

SELECT round(avg(CASE when mnth=12 and m_day=25 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3)as ChristmasEve_Average_Speed_MPH, round(avg(CASE when mnth=12 and m_day=31 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3)as NewYearEve_Average_Speed_MPH, round(avg(CASE when mnth in (11,12) THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3)as Overall_Average_Speed_MPH, round(round(avg(CASE when mnth=12 and m_day=25 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3) - round(avg(CASE when mnth in (11,12) THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3),3) as ChristmasEve_minus_Overall_Avg_Speed_MPH, round(round(avg(CASE when mnth=12 and m_day=31 THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3) - round(avg(CASE when mnth in (11,12) THEN (trip_distance/((unix_timestamp(tpep_dropoff_timestamp)-unix_timestamp(tpep_pickup_timestamp))/3600)) ELSE null end),3),3) as NewYearEve_minus_Overall_Avg_Speed_MPH
from nyc_taxi_data_orc_partition;

--Overall Average Speed for November and December Combined: 12.659 MPH

--25th December
--Average Speed Statistics of Christmas Eve
--Average Speed on Christmas Eve: 16.859 MPH (4.20 MPH or 33.18 % more than overall average)

--31st December
--Average Speed Statistics of New Year's Eve
--Average Speed on New Year's Eve: 14.091 MPH (1.432 MPH or 11.31% more than overall average)

--The average speed on both Cristmas and New Year is higher than the overall average speed.
--However, the average speed is Highest for Christmas out of the 3 instances considered for comparison.
