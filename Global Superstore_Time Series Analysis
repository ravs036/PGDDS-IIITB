rm(list = ls())

#install packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)

#install.packages("forecast")
library(forecast)

#setting working directory
#setwd("C:/Users/Admin/Assignment")   # set as per requirement

retail_Data <- read.csv('Global Superstore.csv')
View(retail_Data)

#Data Understanding
sum(duplicated(retail_Data))      #no duplicates
sum(is.na(retail_Data))  #All postal codes

#Data Cleaning
retail_Data <- subset(retail_Data,TRUE,-c(Postal.Code))

#R accepts only d-m-yyyy format, so date formatting has to be done.
retail_Data$Order.Date <- as.Date(retail_Data$Order.Date, "%d-%m-%Y")
retail_Data$Ship.Date <- as.Date(retail_Data$Ship.Date, "%d-%m-%Y")

#View(retail_Data)
#Data Preparation - Converting Market and segment to a single column
#order date to just month and year. date is not relevant.

retail_Data$Market_Segment <- paste(retail_Data$Market, retail_Data$Segment, sep = "_")
retail_Data$Year_Month <- format(as.Date(retail_Data$Order.Date), "%Y-%m")

#View(retail_Data)


#Step 1: Changing data into buckets
invisible(lapply(split(retail_Data, retail_Data$Market_Segment), function(x) {assign(paste(x$Market_Segment[1]), x, pos = .GlobalEnv)}))

#Step 2: Grouping market buckets by order date , sales, quantity & profit

#Aggregating data monthly on each attribute
data_aggregated_monthly <- retail_Data %>% group_by(Market_Segment, Year_Month) %>% summarise(.,sum(Sales),sum(Profit),sum(Quantity),sd(Profit)*100/mean(Profit))
colnames(data_aggregated_monthly) <- c("Market_Segment","Order_Date","Total_Sales","Total_Profit","Total Quantity","CV")

#Data Plots Segment,Sales Profit and CV
sales_profit_detail <- retail_Data[,c("Profit","Sales","Market","Segment","Quantity")] %>% group_by(Market,Segment) %>% dplyr::summarise(., sum(Sales),sum(Profit),sd(Profit)*100/mean(Profit))
colnames(sales_profit_detail) = c("Market","Segment","Sales","Profit","CV")


ggplot(sales_profit_detail, aes(Segment, Sales, fill=Market)) + geom_bar(position = "dodge",stat = "identity")
ggplot(sales_profit_detail, aes(Segment, Profit, fill=Market)) + geom_bar(position = "dodge",stat = "identity")
ggplot(sales_profit_detail, aes(Segment, CV, fill=Market)) + geom_bar(position = "dodge",stat = "identity")

#Model Building - Based on CV & Profits APAC_Consumer & EU_Consumer are 2 markets with highest Profit & lowest CV 

Top_Markets <- subset(data_aggregated_monthly, Market_Segment == "EU_Consumer" | Market_Segment == "APAC_Consumer")
str(Top_Markets)

#Changing column names
names(Top_Markets) <- c("Market_Segment", "Order_Month", "Sales", "Profit", "Quantity", "CV")

#Getting Top 2 Market Segments
invisible(lapply(split(Top_Markets, Top_Markets$Market_Segment), function(x) {assign(paste0("Top_", x$Market_Segment[1]), x, pos = .GlobalEnv)}))

APAC_Consumer <- Top_APAC_Consumer[,c(2:5)]
EU_Consumer <- Top_EU_Consumer[,c(2:5)]

View(APAC_Consumer)
View(EU_Consumer)


#APAC Sales Forecast
APAC_Consumer_Sales_TS <- ts(APAC_Consumer$Sales,frequency=12,start=c(2011,1),end=c(2014,12))
plot(APAC_Consumer_Sales_TS)

#Testing Holt winters for Smoothing
plot(APAC_Consumer_Sales_TS)
cols <- c("red", "orange", "green", "blue")
alphas <- c(0.2, 0.99, 0.56)
labels <- c(paste("alpha =", alphas), "Original")
for (i in seq(1,length(alphas))) {
  smoothedseries <- HoltWinters(APAC_Consumer_Sales_TS, alpha=alphas[i],beta=FALSE, gamma=FALSE)
  lines(fitted(smoothedseries)[,1], col=cols[i], lwd=2)
}
legend("topleft", labels, col=cols, lwd=2)
smoothedseries <- HoltWinters(APAC_Consumer_Sales_TS, alpha=.3,beta=FALSE, gamma=FALSE)

#Smoothing time series using Moving Average method
w <- 5
APAC_Consumer_Sales_Smoothed_Series <- stats::filter(APAC_Consumer_Sales_TS,filter=rep(1/w,w,method='convolution',sides=2)) 
#Adding NA values to left & right introduced by smoothing
#Smoothing left end of the time series
diff <- APAC_Consumer_Sales_Smoothed_Series[w+2] - APAC_Consumer_Sales_Smoothed_Series[w+1]
for (i in seq(w,1,-1)) {
  APAC_Consumer_Sales_Smoothed_Series[i] <- APAC_Consumer_Sales_Smoothed_Series[i+1] - diff
}
#Smoothing right end of the time series
n <- length(APAC_Consumer_Sales_Smoothed_Series)
diff <- APAC_Consumer_Sales_Smoothed_Series[n-w] - APAC_Consumer_Sales_Smoothed_Series[n-w-1]
for (i in seq(n-w+1, n)) {
  APAC_Consumer_Sales_Smoothed_Series[i] <- APAC_Consumer_Sales_Smoothed_Series[i-1] + diff
}

#Converting smoothed series to data frame
#Using moving average smoothed time series here

APAC_Consumer_Sales_df <- data.frame(cbind(APAC_Consumer$Order_Month,APAC_Consumer_Sales_Smoothed_Series))
colnames(APAC_Consumer_Sales_df) <- c("Month","Sales")

#Changing Sales type
APAC_Consumer_Sales_df$Sales <- as.numeric(as.character((APAC_Consumer_Sales_df$Sales)))

#Plotting smoothed series
plot(APAC_Consumer_Sales_TS)
lines(APAC_Consumer_Sales_Smoothed_Series,col='blue',lwd=2)
lines(fitted(smoothedseries)[,1],col='red',lwd=2)

#Again creating time series from dataframe
APAC_Consumer_Sales_TS <- ts(APAC_Consumer_Sales_df$Sales,frequency=12,start=c(2011,1),end=c(2014,12))

#Creating train & validation sets
ntest <- 6
nTrain <- length(APAC_Consumer_Sales_TS)-ntest
train.ts <- window(APAC_Consumer_Sales_TS,start = c(2011,1),end=c(2011,nTrain))
valid.ts <- window(APAC_Consumer_Sales_TS,start=c(2011,nTrain+1), end=c(2011,nTrain+ntest))
test.ts <- ts(APAC_Consumer_Sales_df$Sales,frequency=12,start=c(2015,1),end=c(2015,6))

#Model 1: Regression model based on trend & seasonality sin(2*pi*trend/12)
train.lm <- tslm(train.ts~trend+I(sin(2*pi*trend/12))+season)

train.lm.forecast <- forecast(train.lm,h=ntest,level=0)

plot(APAC_Consumer_Sales_Smoothed_Series,ylab="Sales",xlab="Time",bty='l',xaxt='n',col="red",title=c("APAC Consumer Sales"))  

lines(train.lm.forecast$fitted,lwd=2,col="brown",lty=3)

lines(train.lm.forecast$lower,col="blue")

#Checking MAPE for our linear model
APAC_consumer_acc <- accuracy(train.lm.forecast$mean,valid.ts)  
APAC_consumer_acc #MAPE=7.46
#ACF and PACF plots 
acf(train.lm.forecast$residuals,lag.max = 12)
pacf(train.lm.forecast$residuals,lag.max = 12)

#Model 2: Auto ARIMA model
autoarima_ts <- auto.arima(train.ts)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
autoarima_acc <- accuracy(autoarima_forecast,valid.ts)
plot(autoarima_forecast)
autoarima_acc
#MAPE=5.79 for Training set & MAPE=5.25 for Test Set

#Forecast for months 
autoarima_ts <- auto.arima(APAC_Consumer_Sales_TS)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
plot(autoarima_forecast)

#EU Sales Forecast
#Creating EU Sales timeseries
EU_Consumer_Sales_TS <- ts(EU_Consumer$Sales,frequency=12,start=c(2011,1),end=c(2014,12))
plot(EU_Consumer_Sales_TS)

#Testing Holt winters for Smoothing

cols <- c("red", "orange", "green", "blue")
alphas <- c(0.2, 0.99, 0.56)
labels <- c(paste("alpha =", alphas), "Original")
for (i in seq(1,length(alphas))) {
  smoothedseries <- HoltWinters(EU_Consumer_Sales_TS, alpha=alphas[i],beta=FALSE, gamma=FALSE)
  lines(fitted(smoothedseries)[,1], col=cols[i], lwd=2)
}
legend("topleft", labels, col=cols, lwd=2)

#Smoothing time series using Moving Average method
w <- 5
EU_Consumer_Sales_Smoothed_Series <- stats::filter(EU_Consumer_Sales_TS,filter=rep(1/w,w,method='convolution',sides=2)) 
#Adding NA values to left & right introduced by smoothing
#Smoothing left end of the time series
diff <- EU_Consumer_Sales_Smoothed_Series[w+2] - EU_Consumer_Sales_Smoothed_Series[w+1]
for (i in seq(w,1,-1)) {
  EU_Consumer_Sales_Smoothed_Series[i] <- EU_Consumer_Sales_Smoothed_Series[i+1] - diff
}
#Smoothing right end of the time series
n <- length(EU_Consumer_Sales_Smoothed_Series)
diff <- EU_Consumer_Sales_Smoothed_Series[n-w] - EU_Consumer_Sales_Smoothed_Series[n-w-1]
for (i in seq(n-w+1, n)) {
  EU_Consumer_Sales_Smoothed_Series[i] <- EU_Consumer_Sales_Smoothed_Series[i-1] + diff
}

#Converting smoothed series to data frame with Order_Month & renaming columns
#Using moving average smoothed time series here
EU_Consumer_Sales_df <- data.frame(cbind(EU_Consumer$Order_Month,EU_Consumer_Sales_Smoothed_Series))
colnames(EU_Consumer_Sales_df) <- c("Month","Sales")

#Changing Sales type
EU_Consumer_Sales_df$Sales <- as.numeric(as.character((EU_Consumer_Sales_df$Sales)))

#Plotting smoothed series
plot(EU_Consumer_Sales_TS)
lines(EU_Consumer_Sales_Smoothed_Series,col='blue',lwd=2)
lines(fitted(smoothedseries)[,1],col='red',lwd=2)

#Again creating time series from dataframe
EU_Consumer_Sales_TS <- ts(EU_Consumer_Sales_df$Sales,frequency=12,start=c(2011,1),end=c(2014,12))

#Creating train & validation sets
ntest <- 6
nTrain <- length(EU_Consumer_Sales_TS)-ntest
train.ts <- window(EU_Consumer_Sales_TS,start = c(2011,1),end=c(2011,nTrain))
valid.ts <- window(EU_Consumer_Sales_TS,start=c(2011,nTrain+1), end=c(2011,nTrain+ntest))
test.ts <- ts(EU_Consumer_Sales_df$Sales,frequency=12,start=c(2015,1),end=c(2015,6))

#Model 1: Regression model based on trend & seasonality sin(2*pi*trend/12)
train.lm <- tslm(train.ts~trend+I(sin(2*pi*trend/12))+season)

train.lm.forecast <- forecast(train.lm,h=ntest,level=0)

plot(EU_Consumer_Sales_Smoothed_Series,ylab="Sales",xlab="Time",bty='l',xaxt='n',col="red")  

lines(train.lm.forecast$fitted,lwd=2,col="brown",lty=3)

lines(train.lm.forecast$lower,col="blue")

#Checking MAPE for our linear model
EU_consumer_acc <- accuracy(train.lm.forecast$mean,valid.ts)  
EU_consumer_acc #MAPE=13.80
#ACF and PACF plots 
acf(train.lm.forecast$residuals,lag.max = 12)
pacf(train.lm.forecast$residuals,lag.max = 12)

#Model 2: Auto ARIMA model
autoarima_ts <- auto.arima(train.ts)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
autoarima_acc <- accuracy(autoarima_forecast,valid.ts)
plot(autoarima_forecast)
autoarima_acc
#MAPE=50.59 for Training set & 24.77 for Validation set for Auto ARIMA

#Forecast for months 
autoarima_ts <- auto.arima(EU_Consumer_Sales_TS)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
plot(autoarima_forecast)


################################################################################################################################################

#APAC Quantity Forecast
APAC_Consumer_Qty_TS <- ts(APAC_Consumer$Quantity,frequency=12,start=c(2011,1),end=c(2014,12))
plot(APAC_Consumer_Qty_TS)

#Testing Holt winters for Smoothing
plot(APAC_Consumer_Qty_TS)
cols <- c("red", "orange", "green", "blue")
alphas <- c(0.2, 0.99, 0.56)
labels <- c(paste("alpha =", alphas), "Original")
for (i in seq(1,length(alphas))) {
  smoothedseries <- HoltWinters(APAC_Consumer_Qty_TS, alpha=alphas[i],beta=FALSE, gamma=FALSE)
  lines(fitted(smoothedseries)[,1], col=cols[i], lwd=2)
}
legend("topleft", labels, col=cols, lwd=2)
smoothedseries <- HoltWinters(APAC_Consumer_Qty_TS, alpha=.3,beta=FALSE, gamma=FALSE)

#Smoothing time series using Moving Average method
w <- 5
APAC_Consumer_Qty_Smoothed_Series <- stats::filter(APAC_Consumer_Qty_TS,filter=rep(1/w,w,method='convolution',sides=2)) 
#Adding NA values to left & right introduced by smoothing
#Smoothing left end of the time series
diff <- APAC_Consumer_Qty_Smoothed_Series[w+2] - APAC_Consumer_Qty_Smoothed_Series[w+1]
for (i in seq(w,1,-1)) {
  APAC_Consumer_Qty_Smoothed_Series[i] <- APAC_Consumer_Qty_Smoothed_Series[i+1] - diff
}
#Smoothing right end of the time series
n <- length(APAC_Consumer_Qty_Smoothed_Series)
diff <- APAC_Consumer_Qty_Smoothed_Series[n-w] - APAC_Consumer_Qty_Smoothed_Series[n-w-1]
for (i in seq(n-w+1, n)) {
  APAC_Consumer_Qty_Smoothed_Series[i] <- APAC_Consumer_Qty_Smoothed_Series[i-1] + diff
}

#Converting smoothed series to data frame
#Using moving average smoothed time series here

APAC_Consumer_Qty_df <- data.frame(cbind(APAC_Consumer$Order_Month,APAC_Consumer_Qty_Smoothed_Series))
colnames(APAC_Consumer_Qty_df) <- c("Month","Qty")

#Changing Sales type
APAC_Consumer_Qty_df$Qty <- as.numeric(as.character((APAC_Consumer_Qty_df$Qty)))

#Plotting smoothed series
plot(APAC_Consumer_Qty_TS)
lines(APAC_Consumer_Qty_Smoothed_Series,col='blue',lwd=2)
lines(fitted(smoothedseries)[,1],col='red',lwd=2)

#Again creating time series from dataframe
APAC_Consumer_Qty_TS <- ts(APAC_Consumer_Qty_df$Qty,frequency=12,start=c(2011,1),end=c(2014,12))

#Creating train & validation sets
ntest <- 6
nTrain <- length(APAC_Consumer_Qty_TS)-ntest
train.ts <- window(APAC_Consumer_Qty_TS,start = c(2011,1),end=c(2011,nTrain))
valid.ts <- window(APAC_Consumer_Qty_TS,start=c(2011,nTrain+1), end=c(2011,nTrain+ntest))
test.ts <- ts(APAC_Consumer_Qty_df$Qty,frequency=12,start=c(2015,1),end=c(2015,6))

#Model 1: Regression model based on trend & seasonality sin(2*pi*trend/12)
train.lm <- tslm(train.ts~trend+I(sin(2*pi*trend/12))+season)

train.lm.forecast <- forecast(train.lm,h=ntest,level=0)

plot(APAC_Consumer_Qty_Smoothed_Series,ylab="Qty",xlab="Time",bty='l',xaxt='n',col="red",title=c("APAC Consumer Quantity"))  

lines(train.lm.forecast$fitted,lwd=2,col="brown",lty=3)

lines(train.lm.forecast$lower,col="blue")

#Checking MAPE for our linear model
APAC_consumer_acc <- accuracy(train.lm.forecast$mean,valid.ts)  
APAC_consumer_acc #MAPE=10.45067
#ACF and PACF plots 
acf(train.lm.forecast$residuals,lag.max = 12)
pacf(train.lm.forecast$residuals,lag.max = 12)

#Model 2: Auto ARIMA model
autoarima_ts <- auto.arima(train.ts)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
autoarima_acc <- accuracy(autoarima_forecast,valid.ts)
plot(autoarima_forecast)
autoarima_acc
#MAPE=4.855356 for Training set & MAPE=13.981510 for Test Set

#Forecast for months 
autoarima_ts <- auto.arima(APAC_Consumer_Qty_TS)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
plot(autoarima_forecast)


#EU Quantity Forecast

#Creating EU Qty timeseries
EU_Consumer_Qty_TS <- ts(EU_Consumer$Quantity,frequency=12,start=c(2011,1),end=c(2014,12))
plot(EU_Consumer_Qty_TS)

#Testing Holt winters for Smoothing

cols <- c("red", "orange", "green", "blue")
alphas <- c(0.2, 0.99, 0.56)
labels <- c(paste("alpha =", alphas), "Original")
for (i in seq(1,length(alphas))) {
  smoothedseries <- HoltWinters(EU_Consumer_Qty_TS, alpha=alphas[i],beta=FALSE, gamma=FALSE)
  lines(fitted(smoothedseries)[,1], col=cols[i], lwd=2)
}
legend("topleft", labels, col=cols, lwd=2)

#Smoothing time series using Moving Average method
w <- 5
EU_Consumer_Qty_Smoothed_Series <- stats::filter(EU_Consumer_Qty_TS,filter=rep(1/w,w,method='convolution',sides=2)) 
#Adding NA values to left & right introduced by smoothing
#Smoothing left end of the time series
diff <- EU_Consumer_Qty_Smoothed_Series[w+2] - EU_Consumer_Qty_Smoothed_Series[w+1]
for (i in seq(w,1,-1)) {
  EU_Consumer_Qty_Smoothed_Series[i] <- EU_Consumer_Qty_Smoothed_Series[i+1] - diff
}
#Smoothing right end of the time series
n <- length(EU_Consumer_Qty_Smoothed_Series)
diff <- EU_Consumer_Qty_Smoothed_Series[n-w] - EU_Consumer_Qty_Smoothed_Series[n-w-1]
for (i in seq(n-w+1, n)) {
  EU_Consumer_Qty_Smoothed_Series[i] <- EU_Consumer_Qty_Smoothed_Series[i-1] + diff
}

#Converting smoothed series to data frame with Order_Month & renaming columns
#Using moving average smoothed time series here
EU_Consumer_Qty_df <- data.frame(cbind(EU_Consumer$Order_Month,EU_Consumer_Qty_Smoothed_Series))
colnames(EU_Consumer_Qty_df) <- c("Month","Qty")

#Changing Sales type
EU_Consumer_Qty_df$Qty <- as.numeric(as.character((EU_Consumer_Qty_df$Qty)))

#Plotting smoothed series
plot(EU_Consumer_Qty_TS)
lines(EU_Consumer_Qty_Smoothed_Series,col='red',lwd=2)
lines(fitted(smoothedseries)[,1],col='red',lwd=2)

#Again creating time series from dataframe
EU_Consumer_Qty_TS <- ts(EU_Consumer_Qty_df$Qty,frequency=12,start=c(2011,1),end=c(2014,12))

#Creating train & validation sets
ntest <- 6
nTrain <- length(EU_Consumer_Qty_TS)-ntest
train.ts <- window(EU_Consumer_Qty_TS,start = c(2011,1),end=c(2011,nTrain))
valid.ts <- window(EU_Consumer_Qty_TS,start=c(2011,nTrain+1), end=c(2011,nTrain+ntest))
test.ts <- ts(EU_Consumer_Qty_df$Qty,frequency=12,start=c(2015,1),end=c(2015,6))

#Model 1: Regression model based on trend & seasonality sin(2*pi*trend/12)
train.lm <- tslm(train.ts~trend+I(sin(2*pi*trend/12))+season)

train.lm.forecast <- forecast(train.lm,h=ntest,level=0)

plot(EU_Consumer_Qty_Smoothed_Series,ylab="Qty",xlab="Time",bty='l',xaxt='n',col="red")  

lines(train.lm.forecast$fitted,lwd=2,col="brown",lty=3)

lines(train.lm.forecast$lower,col="blue")

#Checking MAPE for our linear model
EU_consumer_acc <- accuracy(train.lm.forecast$mean,valid.ts)  
EU_consumer_acc #MAPE=18.18568
#ACF and PACF plots 
acf(train.lm.forecast$residuals,lag.max = 12)
pacf(train.lm.forecast$residuals,lag.max = 12)

#Model 2: Auto ARIMA model
autoarima_ts <- auto.arima(train.ts)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
autoarima_acc <- accuracy(autoarima_forecast,valid.ts)
plot(autoarima_forecast)
autoarima_acc
#MAPE=4.386289 for Training set & 10.212081 for Validation set for Auto ARIMA

#Forecast for months 
autoarima_ts <- auto.arima(EU_Consumer_Qty_TS)
tsdiag(autoarima_ts)
autoarima_forecast <- forecast(autoarima_ts,h=ntest)
plot(autoarima_forecast)

#  Results are presented in attached ppt along withis script.
